class Keen extends Program {
    int[][] tableauInitial;
    Block[] blocks;
    
    void algorithm() {
	creerTableau(4);
    }

    void creerTableau(int x) {
	tableauInitial = new int[x][x];
	blocks = new Block[x*x];
	int idxBlock = 0;
	boolean[][] verification = new boolean[x][x];
	for (int i = 0; i < length(tableauInitial, 1); i++) {
	    for (int j = 0; j < length(tableauInitial, 2); j++) {
		if (!verification[i][j]) {
		    dessinerBlock(i, j, verification, idxBlock);
		}
	    }
	}
    }

    void afficherBlocks(int nBlock, int nCoord) {
	println("Coords :" + blocks[nBlock].tab[nCoord].x + " : " + blocks[nBlock].tab[nCoord].y);
    }

    void dessinerBlock(int i, int j, boolean[][] verification, int idxBlock) {
	Coordonnees coords = estDejaPris(verification, i, j);
	int ord = (int) (random() * (coords.y + 1));
	int abs = (int) (random() * (coords.x + 1));
	println("ord " + ord + " abs " + abs); 
	blocks[idxBlock] = new Block();
	blocks[idxBlock].tab = new Coordonnees[ord + abs + 1];
	for (int k = 0; k <= abs; k++) {
	    blocks[idxBlock].tab[k] = new Coordonnees();
	    blocks[idxBlock].tab[k].x = j + k;
	    blocks[idxBlock].tab[k].y = i;
	    verification[i][j+k] = true;
	    println("x : " + (j + k)+ " y : " + i);
	}

	for (int l = 1; l <= ord; l++) {
	    blocks[idxBlock].tab[l] = new Coordonnees();
	    blocks[idxBlock].tab[l].x = j;
	    blocks[idxBlock].tab[l].y = i + l;
	    verification[i+l][j] = true;
	    println("x : " + j + " y : " + (i + l));
	}
	idxBlock = idxBlock + 1;
    }

    

    Coordonnees estDejaPris(boolean[][] verif, int tableauY, int tableauX) {
	int x = 1;
	int y = 1;
	while(x <= 2 && tableauX + x < length(verif, 2)) {
	    if(!verif[tableauY][tableauX + x]) {
		x = x + 1;
	    }
	    else break;
	}
	x = x - 1;
	    
	while(y <= 2 && tableauY + y < length(verif, 1)) {
	    if(!verif[tableauY + y][tableauX]) {
		y = y + 1;
	    }
	    else break;
	}
	y = y - 1;

	Coordonnees c = new Coordonnees();
	c.x = x;
	c.y = y;
	return c;
    }
}

class Block {
    Coordonnees[] tab;
    Contrainte contrainte = new Contrainte();
}

class Contrainte {
    int valeur = 0;
    int operation = 1;
}

class Coordonnees {
    int x;
    int y;
}
